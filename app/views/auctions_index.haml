-content_for :head do
  =stylesheet_link_tag    :fullcalendar, :contextmenu
  =javascript_include_tag :fullcalendar, :contextmenu
:javascript
  jQuery.fn.applyContextMenu = function() {
      $(this).contextMenu(
          { menu: 'contextMenu' },
          function(action, el, pos) {
              var id = $(el).attr("data-id");
              if(action == "edit"){
                  viewModel.getAuctionById(id).edit();
              }
              if(action == "delete"){
                  viewModel.getAuctionById(id).remove();
              }
          }
        );
        $(this).click(function(event){
            var id = $(this).attr("data-id");
            document.location.href = "auctions/" + id + "/bidders";
        });
    };

  viewModel = {
    profiles : #{@profiles.to_json},
    locations : #{@locations.to_json},
    auctions : ko.observableArray([]),
    activeAuction : ko.model(),
    auctionProfile : new ko.observable()
  }

  viewModel.getAuctionById = function(id){
      return ko.utils.arrayFirst(viewModel.auctions(), 
             function(auc) { return auc.id() == id; }
      );
  }

  viewModel.upcomingAuctions = ko.dependentObservable(function(){
    var today = util.todayAsDate();
    
    var end = util.todayAsDate();
    end.setDate(today.getDate() + 7);
    
    var upcoming = ko.utils.arrayFilter(this.auctions(), function(auc){
      var result = $.fullCalendar.parseDate(auc.start())
      return result != null && result.getTime() >= today.getTime() && result.getTime() <= end.getTime();
    });
    return util.sortArrayByProperty(upcoming, "auction_date()");

  }, viewModel);

  viewModel.recentAuctions = ko.dependentObservable(function(){
    var today = util.todayAsDate();
    
    var start = util.todayAsDate();
    start.setDate(today.getDate() - 7);
    
    var recent = ko.utils.arrayFilter(this.auctions(), function(auc){
      var result = $.fullCalendar.parseDate(auc.start())
      return result != null && result.getTime() <= today.getTime() && result.getTime() >= start.getTime();
    });
    return util.sortArrayByProperty(recent, "auction_date()").reverse();
  }, viewModel);

  // Load the initial state from server
  $.get("auctions/all.json", function(data) {
    var allAuctions = ko.mapToModelList(auction, data, viewModel);
    viewModel.auctions(allAuctions);
  });
  
  // Manually subscribe the Calendar to changes in the set of auctions.
  // TODO: work on only updating applicable portions..
  viewModel.auctions.subscribe(function(newValue) {
    $('#calendar').fullCalendar("refetchEvents");
  });

  function formatDate(date,format){
    return $.fullCalendar.formatDate($.fullCalendar.parseDate(date), format);
  }

  function auction(viewModel){
    this.id = ko.property();
    this.title = ko.property();
    this.start = ko.property();
    this.end = ko.property();
    this.description = ko.property();
    this.location_id = ko.property();
    this.profile_id = ko.property();

    var self = this;

    this.color = ko.dependentObservable(function(){
        var locationMatch = ko.utils.arrayFirst(viewModel.locations, function(loc) {
                        return loc.id == self.location_id();
        });
        return locationMatch == null ? '#36C' : locationMatch.color;
    });
    
    this.auction_date = ko.dependentObservable({
        read: function () {
            return formatDate(self.start(), 'yyyy-MM-dd');
        },
        write: function (value) {
            self.start.temp = value + " " + self.start_time();
        },
        owner : viewModel
    });

    this.start_time = ko.dependentObservable({
        read: function () {
            return formatDate(self.start(), 'HH:mm');
        },
        write: function (value) {
            self.start.temp = self.auction_date() + " " + value;
        },
        owner : viewModel
    });

    this.end_time = ko.dependentObservable({
        read: function () {
            return formatDate(self.end(), 'HH:mm');
        },
        write: function (value) {
            self.end.temp = self.auction_date() + " " + value
        },
        owner : viewModel
    });

    this.is_today = ko.dependentObservable(function(){
      var today = formatDate(new Date(), 'yyyy-MM-dd');
      return today == self.auction_date();
    });

    this.profile = ko.dependentObservable(function(){
      if(!this.profile_id){
        return null;
      }
      var id = this.profile_id.temp();
      return ko.utils.arrayFirst(viewModel.profiles, function(prof) {
              return prof.id == id;
      });
    }, this);

    this.buyer_premium_formatted = ko.dependentObservable(function(){
      var p = this.profile();
      if(p && p.buyer_premium_type && p.buyer_premium_amount){
        return (p.buyer_premium_type == "FIXED" ? "$" + p.buyer_premium_amount.toFixed(2) : p.buyer_premium_amount + "%");
      }
      return "N/A"; 

    }, this);

    this.commission_formatted = ko.dependentObservable(function(){
      var p = this.profile();
      if(p && p.commission_type && p.commission_amount){
        return (p.commission_type == "FIXED" ? "$" + p.commission_amount.toFixed(2) : p.commission_amount + "%");
      }
      return "N/A"; 

    }, this);

    this.tax_exempt = ko.dependentObservable(function(){
      return this.profile() && this.profile().tax_exempt;
    }, this);

    this.edit = function(){
      var title = this.id() ? this.title() : "New Auction";
      viewModel.activeAuction(this);
      $("#editDialog").dialog({
        title: title,
        modal: true,
        height:430,width:740
      });
      $("#tabs").verticalTabs();
    }.bind(this);

    this.cancel = function(){
      viewModel.activeAuction.reset();
      $("#editDialog").dialog("close");
    }.bind(this);

    this.save = function(){
      var wrapper = this;
      var id = wrapper().id;
      if(!id()){
        // create the record
        wrapper.save("auctions/new.json", function(result){
            viewModel.auctions.push(viewModel.activeAuction());            
            $("#editDialog").dialog("close");
            $.growlUI('Auction Created'); 
        });
        
      } else {
        // save the record
        wrapper.save("auctions/" + id() + ".json", function(){
            $("#editDialog").dialog("close");
            $('#calendar').fullCalendar("refetchEvents");
            $.growlUI('Auction Saved'); 
        });
      }
    }

    this.remove = function(){
      var self = this;
      var text = "Are you sure you want to remove this Auction record? Note that " 
          + "it will only be possible to remove the record if it has no associated lots or sales.";
      $("#dialog").html(text);
      $("#dialog").confirmationDialog({
        autoStart: true,
        onConfirm: function(){
          $.ajax({
            url:  "auctions/destroy/" + self.id() + "?_method=delete",
            dataType: "json",
            type: "get",
            success: function(result) {
              if(result.errors){
                $.growlError("Error Removing Auction",result.errors); 
              } else {
                viewModel.auctions.remove(function(item) { return item.id() == self.id() });
                $.growlUI("Auction Removed"); 
              }
            }
          });
        }
      });
    }.bind(this);
  }

  $(function(){
    ko.applyBindings(viewModel);
    
    $("#accordian").accordion({ autoHeight: false, clearStyle: true });

    $('#calendar').fullCalendar({
      ignoreTimezone: false,
      allDayDefault: false,
      selectable: true,
      selectHelper: true,
      header: {
        left: 'prev,next today',
        center: 'title',
        right: 'month,agendaWeek'
      },
      select: function(start, end, allDay) {
        var startTime = $.fullCalendar.formatDate(start, 'yyyy-MM-dd HH:mm');
        var endTime = $.fullCalendar.formatDate(end, 'yyyy-MM-dd HH:mm' );
        if(allDay){  
          var startTime = $.fullCalendar.formatDate(start, 'yyyy-MM-dd')  + ' 12:00';
          var endTime = $.fullCalendar.formatDate(start, 'yyyy-MM-dd' ) + ' 15:00';
          var newAuc = new auction(viewModel);
          newAuc.start(startTime);
          newAuc.end(endTime);
          newAuc.edit();

        } else {
          var newAuc = new auction(viewModel);
          newAuc.start(startTime);
          newAuc.end(endTime);
          newAuc.edit();
        }
      },
      events : function(start, end, callback) { 
        callback(ko.toJS(viewModel.auctions)) 
      },
      eventRender: function(event, element) {
        $(element).addClass("clickable");
        $(element).attr("data-id", event.id);
        $(element).applyContextMenu();
      }
    })

    $(".clickable").applyContextMenu();
  });

  function clearDates(){
    $("#start_date").val("");
    $("#end_date").val("");
  }

#editDialog{ :style=>"display:none;"}
  %div{:'data-bind' => "template: {name:'auctionTabs', data: viewModel.activeAuction}"}

%script#auctionTabs{:type => "text/x-jquery-tmpl"}
  #tabs
    %ul
      %li 
        %a{:href => "#auction-edit"}Edit General 
      %li 
        %a{:href => "auctions/statistics/${id}"} Statistics
    #auction-edit{:style => "float:right"}
      %div{:'data-bind' => "template: {name:'auctionForm', data: viewModel.activeAuction}"}

%script#auctionForm{:type => "text/x-jquery-tmpl"}
  .flash
    .message.error{:'data-bind' => "visible: viewModel.activeAuction.hasErrors()"}
      Errors occurred while saving the auction record.
  %form.form{:id => 'auctionForm', :'data-bind' => "submit: save"}
    %table
      %tr
        %td{:valign => 'top'}
          %fieldset{:style => "padding:6px"}
            %legend
              General
            .group
              %label{:for=>:title}Title:
              %span.error{:'data-bind' => "text: title.errors"}
              %br
              %input.text_field{:'data-bind' => "value: title.temp"}
            .group
              %label{:for=>:location_id}Location:
              %span.error{:'data-bind' => "text: location_id.errors"}
              %br
              %select{:'data-bind' => "options: viewModel.locations, optionsText: 'name', optionsValue:'id', value:location_id.temp, optionsCaption: 'Choose Location...'"}
      
            %table
              %tr
                %td{:style => 'width:120px'}
                  .group
                    =label_tag :auction_date
                    %input.text_field{:'data-bind' => 'value: auction_date, type: "date"'}
                %td{:style => 'width:60px;padding-left:8px'}
                  .group
                    =label_tag :start
                    %input.text_field{:'data-bind' => 'value: start_time'}
                %td{:style => 'padding-left:8px'}
                  to
                %td{:style => 'width:60px;padding-left:8px'}
                  .group
                    =label_tag :end
                    %input.text_field{:'data-bind' => 'value: end_time'}
            .group
              %label{:for=>:description}Description:
              %span.error{:'data-bind' => "text: description.errors"}
              %br
              %textarea.text_area{:'data-bind' => 'value: description.temp'}
        %td{:valign => 'top'}
          %fieldset{:style => "padding:6px"}
            %legend
              Config
            .group
              %label Config Profile:
              %span.error{:'data-bind' => "text: profile_id.errors"}
              %br
              %select{:'data-bind' => "options: viewModel.profiles, optionsText: 'name', optionsValue:'id', value: profile_id.temp, optionsCaption: 'Select A Profile...'"}
            .group
              %label Buyer Premium:
              %br
              %span{:'data-bind' => "text: buyer_premium_formatted"}
            .group
              %label Commission:
              %br
              %span{:'data-bind' => "text: commission_formatted"}
            .group
              %label Tax Exempt?
              %br
              %input{:type => 'checkbox', :'data-bind' => "checked: tax_exempt", :disabled => true}
    %button.form_button{:type => 'submit'}
      Save
    &nbsp;&nbsp;|&nbsp;&nbsp;
    =link_to("Cancel", "", :class => :button_to, :'data-bind' => "click : cancel")

%script{:type => "text/x-jquery-tmpl", :id => "auctionRow"}
  %tr.clickable{:onClick => "document.location=\'auctions/${id}/bidders\'", 'data-bind'=>"style: { fontWeight: is_today() ? 'bold' : '' }"}
    %td{:style => 'min-width:70px'}
      %span{'data-bind'=>"text: auction_date"}
    %td{:width => '180px'}
      %div 
        %span{'data-bind'=>"text: title"}
    %td{:style => 'min-width:48px'}
      %span{:'data-bind' => "click: edit, clickBubble: false"}
        =image_tag 'page_white_edit.png'
      %span{:'data-bind' => "click: remove, clickBubble: false"}
        =image_tag 'page_white_delete.png'

-content_for(:context_panel) do
  %ul.contextMenu{:id => "contextMenu"}
    %li.edit
      %a{:href => "#edit"} 
        =image_tag 'page_white_edit.png'
        Edit
    %li.delete
      %a{:href => "#delete"} 
        =image_tag 'page_white_delete.png'
        Delete
  #search.block
    #accordian
      %h3="&nbsp;&nbsp;&nbsp;Current and Upcoming"
      %div{:style => 'padding-left:0px;padding-right:0px;'}
        %table.table
          %tbody{:'data-bind' => "template: {name:'auctionRow', foreach: upcomingAuctions()}"}
            %tr{:'data-bind' => "visible: upcomingAuctions().length == 0"}
              %td No Upcoming Auctions
          
      %h3="&nbsp;&nbsp;&nbsp;Recent Auctions"
      %div{:style => 'padding-left:0px;padding-right:0px;'}
        %table.table
          %tbody{:'data-bind' => "template: {name:'auctionRow', foreach: recentAuctions()}"}
            %tr{:'data-bind' => "visible: recentAuctions().length == 0"}
              %td No Recent Auctions
      
.block 
  .content
    .inner
      #calendar