:javascript
  tableModel = {
    sortAscending: ko.observable(true),
    sortColumn: ko.observable("#{properties.first}"),
    data : #{list.nil? ? '[]' : list.to_json(:only => [:id], :methods => (properties))},
    pageSize: #{options[:paginate] ? options[:page_size] : 0},
    currentPageIndex : ko.observable(0)
  }

  var identityFilter = function(){return tableModel.data;}
  tableModel.filter = ko.dependentObservable(#{options.has_key?(:js_filter)? options[:js_filter] : "identityFilter"}, tableModel);


  tableModel.orderedRows = ko.dependentObservable(function() {
    //Filter ...
    dataToSort = this.filter();

    // ... sort ...
    var sorted = util.sortArrayByProperty(dataToSort, tableModel.sortColumn());
    if(!tableModel.sortAscending()) sorted.reverse();


    // ... and paginate
    if(this.pageSize > 0){
      var startIndex = this.pageSize * this.currentPageIndex();
      return sorted.slice(startIndex, startIndex + this.pageSize);
    } else {
      return sorted;
    }
  }, tableModel);

  tableModel.totalPages = ko.dependentObservable(function() {
    return Math.ceil(ko.utils.unwrapObservable(tableModel.data).length / tableModel.pageSize);
  }, tableModel);

  var applySort = function(column) {
    if(column === tableModel.sortColumn()){
      tableModel.sortAscending(!tableModel.sortAscending());
    } else {
      tableModel.sortColumn(column);
      tableModel.sortAscending(true);  // always reset when sort on new column
      tableModel.currentPageIndex(0);
    }
  };

  $(function(){
    ko.applyBindings(tableModel, document.getElementById("main"));
  });

%div#simpletable{:'data-bind' => 'template: "listTemplate"'}
%script{:type => "text/html", :id => "listTemplate"}
  %table.table
    %tr
      -properties.each_index do |i|
        %th.clickable{:class=> (i==0 ? 'first':''), :onClick=>"applySort('#{properties.at(i)}')", :title=>"Sort by #{properties.at(i)}"}=pat(properties.at(i))
      %th.last="&nbsp;"
    \{{each(i, row) orderedRows()}}
    %tr{:'data-bind' => 'css:{odd : i%2==0, even: i%2==1}',
        :class => ('clickable' if options.has_key?(:click)),
        :onClick => ("document.location.href='#{options[:click]}'" if options.has_key?(:click))}
      -properties.each do |col|
        %td ${row.#{col}}
      %td.last
        =button_to_edit(options[:edit]) if options.has_key?(:edit)
        =" | " if options.has_key?(:edit) && options.has_key?(:delete)
        =button_to_delete(options[:delete], :'data-bind' => "confirm:'Are you sure you want to remove this record?'") if options.has_key?(:delete)
        =yield if block_given?
    \{{/each}}
-if options[:paginate]
  %div.pagination{:'data-bind' => 'template: "paginationTemplate"'}
%script{:type => "text/html", :id => "paginationTemplate"}
  {{each(i) ko.utils.range(1, totalPages() )}}
  %a{:href => "#", :'data-bind' => "click: function() { currentPageIndex(i) }, css: { selected: i == currentPageIndex() }"}
    Page ${ i + 1 }
  &nbsp;
  {{/each}}
