-content_for(:context_panel) do
  #options.block{}
    %h3 Current Lot Information
    .content{:'data-bind' => "visible: showLotInfo"}
      %table.table
        %tr
          %td
            %label Lot Number
          %td
            %span{:'data-bind' => "text : currentLot().number"}
        %tr
          %td
            %label Consignee
          %td
            %span{:'data-bind' => "text : currentLot().consignee_text"}
        %tr
          %td
            %label Description
          %td
            %span{:'data-bind' => "text : currentLot().description"}
        %tr
          %td
            %label Total Qty.
          %td
            %span{:'data-bind' => "text : currentLot().qty_available"}
     
    .content{:'data-bind' => "visible: !viewModel.showLotInfo()"}
      N/A


:javascript
  $(function(){  
    $("button#mode").button({icons: {
      secondary: "ui-icon-triangle-1-s"
    }}).next().menu({
        select: function(event, ui) {
            $(this).hide();
        }
    }).popup();
   
    $("#sale").validate({
       messages:{
         "sale[bidder]" : { remote : "Unregistered number" }
       },
       submitHandler: function() {
         viewModel.addSale();
       },
    });
    ko.applyBindings(viewModel);
  });

  models.Sale.prototype.remove = function(){
    var self = this;
    var text = "Are you sure you want to remove this Sale record from the auction?";
    $("#dialog").html(text);
    $("#dialog").confirmationDialog({
      autoStart: true,
      onConfirm: function(){
        $.post("sales/destroy/" + self.id(), function() {
          viewModel.sales.remove(function(sale) { return sale.id() == self.id() });
          $.growlUI("Sale Removed",null,1000); 
      });
      }
    });
  }
  
  var viewModel = {
      newSale: new ko.observable(new models.Sale()),
      sales: new ko.observableArray([]),
      lots : new ko.observableArray([]),
      addSale: function() {
        $.ajax({
          url:  "sales/new.json",
          type: "post",
          data: ko.tempToJSON(viewModel.newSale),
          contentType: "application/json",
          success: function(result) {
            if(result.errors){
              $.growlError("Unable to Create Sale",result.errors_full); 
            } else {
                viewModel.sales.unshift(models.parseSale(result));
                $.growlUI("Sale Recorded",null,1000); 
                viewModel.newSale().reset();
            }
          }
        });
      }
  };

  $.get("sales.json", function(data) {
    var allSales = $.map(data, function(json) {
      return models.parseSale(json);
    });
    viewModel.sales(allSales);
  });

  $.get("lots.json", function(data) {
    var allLots = $.map(data, function(json) {
      return models.parseLot(json);
    });
    viewModel.lots(allLots);
  });   

  viewModel.currentLot = ko.dependentObservable(function() {
      var result = ko.utils.arrayFirst(viewModel.lots(), 
             function(lot) { return lot.number() == viewModel.newSale().lot(); }
      );
      return result || {};
  }, viewModel);

 
  viewModel.showLotInfo = ko.dependentObservable(function(){
      return this.currentLot().number != undefined;
  }, viewModel);

  viewModel.currentConsignee = ko.dependentObservable(function() {
    
    var consignee_id = ko.utils.unwrapObservable(viewModel.currentLot().consignee_id);
    return consignee_id ? models.getConsigneeById(consignee_id) : {};

  }, viewModel);

  viewModel.currentConsigneeCode = ko.dependentObservable({
    read: function() {
        var cons = viewModel.currentConsignee();
        return cons ? cons.code : "";
    },
    write: function(value){
        var consignee = models.getConsigneeByCode(value);
        var id = consignee ? consignee.id : "";
        viewModel.newSale().consignee_id(id);
    }
  }, viewModel);

  viewModel.currentConsigneeCode.subscribe(function(value) {
      var consignee = models.getConsigneeByCode(value);
      var id = consignee ? consignee.id : "";
      viewModel.newSale().consignee_id(id);
  });

  viewModel.currentLot.subscribe(function(value){
      if(value.consignee_id){
         viewModel.newSale().consignee_id(value.consignee_id());
      }
      if(value.description){
         viewModel.newSale().description(value.description());
      }
  });

.block
  .content
    #title
      %h2.title #{@auction.auction.title} :: Sales
    #title-menu
      %button#mode
        Entry Mode
      %ul{:style => 'width: 130px'}
        %li
          %a{:href => '#direct'}
            Direct / Lotted
        %li
          %a{:href => '#catalog'}
            By Catalog Number
    
    .inner
      %form.form{:id => 'sale',:method => 'post', :autocomplete => "false",
                 :action=>"/auctions/#{params[:auction_id]}/sales/new"}
        %table.table{:'data-bind' =>  "dataTable: { dataSource: sales, rowTemplate: 'saleRow', columns: ['lot', 'consignee_text', 'description', 'bidder', 'price', 'quantity', null], 
                       options:{'sPaginationType':'full_numbers','bSort': false}}"}
          %thead
            %tr
              %th.first Lot #
              %th Consignee
              %th Description
              %th Bidder
              %th Price
              %th Qty.
              %th.last
            %tr
              %td{:valign => 'top'}
                %input.text_field.required{:id => 'lot', :type => 'text',
                       :name => 'sale[lot]', :style => "width:50px",
                       :'data-bind' => "value:newSale().lot"}
                .floating-error
              %td{:valign => 'top'}
                %input.text_field{:type => 'hidden', :name=> 'sale[consignee_id]', 
                        :'data-bind' => "value: newSale().consignee_id.temp"}
                %input.text_field.required{:type => 'text', :name=> 'sale[consignee_code]', 
                        :style => "width:50px", :'data-bind' => "value: newSale().consignee_code.temp"}
                .floating-error
                %br
                %span{:'data-bind' => 'text:newSale().consignee_text.temp'}
              %td{:valign => 'top'}
                %textarea.text_area.required.text_area{:name => 'sale[description]', 
                       :style => "width:200px", :'data-bind' => "value: newSale().description.temp"}
                .floating-error
              %td{:valign => 'top'}
                %input.text_field.required{:name=> 'sale[bidder]', :'data-bind' => "value: newSale().bidder.temp",
                      :remote => "sales/check_bidder_number", :style => "width:50px"}
                .floating-error
              %td{:valign => 'top'}
                %input.text_field.required{:type => 'text', :name => 'sale[price]', :style => "width:50px",
                      :'data-bind' => "value: newSale().price.temp"}
                .floating-error
              %td{:valign => 'top'}
                %input.text_field.required{:id => 'qty', :type => 'text', :name => 'sale[quantity]', :style => "width:30px",
                      :'data-bind' => "value: newSale().quantity.temp"}
                .floating-error
              %td.required{:valign => 'top'}
                %input.form_button{:id => 'submit', :type => 'submit', :name => 'Submit',:tabindex => "6"}

%script{:type => "text/html", :id => "saleRow"}
  %td
    %span{:'data-bind' => "text: lot"}
  %td
    %span{:'data-bind' => "text: consignee_text() "}
  %td
    %span{:'data-bind' => "text: description"}
  %td
    %span{:'data-bind' => "text: bidder"} 
  %td
    %span{:'data-bind' => "text: price"} 
  %td
    %span{:'data-bind' => "text: quantity"}
  %td
    %span.clickable{:'data-bind' => "click: remove, clickBubble: false"}
      =image_tag 'page_white_delete.png'