:javascript
  $(function(){  
    $("button#mode").button({icons: {
      secondary: "ui-icon-triangle-1-s"
    }}).next().menu({
        select: function(event, ui) {
            $(this).hide();
        }
    }).popup();
   
    $("#sale").validate({
       // the remote valation isn't playing well with onkeyup
       onkeyup: false,
       submitHandler: function() {
         viewModel.addSale();
       },
       errorPlacement: function(error, element) {
         var errorDiv = element.next();
         error.appendTo(errorDiv);
       },
       highlight: function(element, errorClass, validClass) {
         $(element).addClass(errorClass).removeClass(validClass);
         var errorDiv = $(element).next();
         $(errorDiv).show();
       },
       unhighlight: function(element, errorClass, validClass) {
         if(element != null){
           $(element).removeClass(errorClass).addClass(validClass);
           var errorDiv = $(element).next();
           $(errorDiv).hide();
         }
       },
       messages:{
         "sale[bidder]" : { remote : "Unregistered number" }
       }
     });
    reset();
    ko.applyBindings(viewModel);
  });

  reset = function(){
    // TODO : kind of a weird mish-mash between dom and view-model handling.
    viewModel.lastErrorsFull("");
    $('#sale')[0].reset();
    $('#qty').val('1');
    $('#lot').focus();
    viewModel.currentLotNumber("");
    viewModel.currentSale().consignee_id("");
  }

  
  
  var viewModel = {
      currentLotNumber: new ko.observable(""),
      currentSale: new ko.observable(new models.Sale()),
      lastErrorsFull: new ko.observable(""),
      sales: new ko.observableArray([]),
      lots : new ko.observableArray([]),
      addSale: function() {
        ajaxSubmit($("#sale"), function(results){
              if(results.errors){
                viewModel.lastErrorsFull(results.errors_full);
              } else {
                viewModel.sales.unshift(models.parseSale(results));
                reset();
              }
        });
      }
  };

  $.get("sales.json", function(data) {
    var allSales = $.map(data, function(json) {
      return models.parseSale(json);
    });
    viewModel.sales(allSales);
  });

  $.get("lots.json", function(data) {
    var allLots = $.map(data, function(json) {
      return models.parseLot(json);
    });
    viewModel.lots(allLots);
  });   

  viewModel.currentLot = ko.dependentObservable(function() {
      var result = ko.utils.arrayFirst(viewModel.lots(), 
             function(lot) { return lot.number() == viewModel.currentLotNumber(); }
      );
      return result || {};
  }, viewModel);

 
  viewModel.currentConsignee = ko.dependentObservable(function() {
    
    var consignee_id = ko.utils.unwrapObservable(viewModel.currentLot().consignee_id);
    return consignee_id ? models.getConsigneeById(consignee_id) : {};

  }, viewModel);

   


  viewModel.currentConsigneeCode = ko.dependentObservable({
    read: function() {
        var cons = viewModel.currentConsignee();
        return cons ? cons.code : "";
    },
    write: function(value){
        var consignee = models.getConsigneeByCode(value);
        var id = consignee ? consignee.id : "";
        viewModel.currentSale().consignee_id(id);
    }
  }, viewModel);

  viewModel.currentConsigneeCode.subscribe(function(value) {
      var consignee = models.getConsigneeByCode(value);
      var id = consignee ? consignee.id : "";
      viewModel.currentSale().consignee_id(id);
  });

.flash
  .message.error{:'data-bind' => "text: lastErrorsFull, visible: lastErrorsFull()"}
.block
  .content
    #title
      %h2.title #{@auction.title} :: Sales
    #title-menu
      %button#mode
        Entry Mode
      %ul{:style => 'width: 130px'}
        %li
          %a{:href => '#direct'}
            Direct / Lotted
        %li
          %a{:href => '#catalog'}
            By Catalog Number
    
    .inner
      %form.form{:id => 'sale',:method => 'post', :autocomplete => "false",
                 :action=>"/auctions/#{@auction.id}/sales/new"}
        %table.table
          %thead
            %tr
              %th.first Lot #
              %th Consignee
              %th Description
              %th Bidder
              %th Price
              %th Qty.
              %th.last
            %tr
              %td{:valign => 'top'}
                %input.text_field.required{:id => 'lot', :type => 'text',
                       :name => 'sale[lot]', :style => "width:50px",
                       :'data-bind' => "value:currentLotNumber"}
                .floating-error
              %td{:valign => 'top'}
                %input.text_field{:type => 'hidden', :name=> 'sale[consignee_id]', 
                        :'data-bind' => "value: currentSale().consignee_id"}
                %input.text_field.required{:type => 'text', :name=> 'sale[consignee_code]', 
                        :style => "width:50px", :'data-bind' => "value: currentConsigneeCode"}
                .floating-error
                %br
                %span{:'data-bind' => 'text:currentSale().consignee_text'}
              %td{:valign => 'top'}
                %textarea.text_area.required.text_area{:name => 'sale[description]', 
                       :style => "width:200px", :'data-bind' => "text: currentLot().description"}
                .floating-error
              %td{:valign => 'top'}
                %input.text_field.required{:type => 'text', :name=> 'sale[bidder]', 
                      :remote => "sales/check_bidder_number", :style => "width:50px"}
                .floating-error
              %td{:valign => 'top'}
                %input.text_field.required{:type => 'text', :name => 'sale[price]', :style => "width:50px"}
                .floating-error
              %td{:valign => 'top'}
                %input.text_field.required{:id => 'qty', :type => 'text', :name => 'sale[quantity]', :style => "width:30px"}
                .floating-error
              %td.required{:valign => 'top'}
                %input.form_button{:id => 'submit', :type => 'submit', :name => 'Submit',:tabindex => "6"}
          %tbody{:'data-bind'=>'template: { name: "salesListTemplate", foreach: sales }'}

%script{:type => "text/html", :id => "salesListTemplate"}
  %tr
    %td
      %span{:'data-bind' => "text: lot"}
    %td
      %span{:'data-bind' => "text: consignee_text() "}
    %td
      %span{:'data-bind' => "text: description"}
    %td
      %span{:'data-bind' => "text: bidder"} 
    %td
      %span{:'data-bind' => "text: price"} 
    %td
      %span{:'data-bind' => "text: quantity"}
    %td
      =button_to( pat(:delete), "sales/destroy/${id}", :method => :delete, :class => :button_to)