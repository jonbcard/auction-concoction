:javascript
  $(function(){
    var viewModel =  biddersViewModel();
    ko.applyBindings(viewModel);


    $("button#import").button({
          icons: {
            primary: "ui-icon-transfer-e-w",
            secondary: "ui-icon-triangle-1-s"
          }
        }).next().menu({
          select: function(event, ui) {
            $(this).hide();
          }
        }).popup();
  });

  function parse_bidder(viewModel, json){
    return new bidder(viewModel, json.id, json.number, json.first_name, json.last_name, json.id_number, json.status);
  }

  function bidder(viewModel, id, number, first_name, last_name, id_number, status) {
    this.id = ko.property(id);
    this.number = ko.property(number);
    this.first_name = ko.property(first_name);
    this.last_name = ko.property(last_name);
    this.id_number = ko.property(id_number);
    this.status = ko.property(status ? status : "ACTIVE");

    // functions
    this.edit = function(){
      viewModel.activeBidder(this);
      $("#bidderDialog").dialog({title:"Edit Bidder"});
    }

    this.cancel = function(){
      viewModel.activeBidder.reset();
      $("#bidderDialog").dialog("close");
    }

    var self = this;
    this.save = function(){
      if(id == undefined){
        // create the record
        var self = this;
        $.ajax({
          url:  "bidders/new.json",
          type: "post",
          data: ko.tempToJSON(this),
          contentType: "application/json",
          success: function(result) {
            if(result.errors){
              viewModel.activeBidder.applyErrors(result.errors);
            } else {
              viewModel.activeBidder.commit();
              viewModel.activeBidder().id(result.id);
              viewModel.bidders.push(viewModel.activeBidder());
              viewModel.activeBidder.reset();
              $("#bidderDialog").dialog("close");
              $.growlUI("Bidder Created"); 
            }
          }
        });
      } else {
        // save the record
        $.ajax({
          url:  "bidders/" + id + ".json",
          type: "post",
          data: ko.tempToJSON(this),
          contentType: "application/json",
          success: function(result) {
            if(result.errors){
              viewModel.activeBidder.applyErrors(result.errors);
            } else {
              viewModel.activeBidder.commit().reset();
              $("#bidderDialog").dialog("close");
              $.growlUI("Bidder Saved"); 
            }
          }
        });
      }
    }
  }

  function biddersViewModel(){
    this.bidders = ko.observableArray([]);
    this.activeBidder = ko.model();
    this.showInactive = new ko.observable(false);

    // view model functions
    this.displayedBidders = ko.dependentObservable(function() {
      return ko.utils.arrayFilter(this.bidders(), function(bidder) {
        return this.showInactive() || bidder.status() == 'ACTIVE';
      });
    }, this);

    this.newBidder = function() {
      aNewBidder = new bidder(this);
      aNewBidder.status("ACTIVE");
      aNewBidder.edit();
    };

    // Load the initial state from server
    
    this.load = function() {
      var self = this;
      $.get("bidders.json", function(data) {
        var allBidders = $.map(data, function(json) {
            return parse_bidder(self, json);
        });
        self.bidders(allBidders);
      });
    }
    
    load();


  }

#bidderDialog{ :style=>"display:none;"}
  %div{:'data-bind' => "template: {name:'bidderForm', data: activeBidder}"}


%script{:type => "text/x-jquery-tmpl", :id => "bidderForm"}
  .flash
    .message.error{:'data-bind' => "visible: activeBidder.hasErrors()"}
      Errors occurred while saving the bidder.
  %form.form{:id => 'bidderForm', :'data-bind' => "submit: save"}
    .group
      %label{:for=>:number}Number:
      %span.error{:'data-bind' => "text: number.errors"}
      %br
      %input.required{:'data-bind' => "value: number.temp"}
    .group
      %label{:for=>:first_name}First Name:
      %span.error{:'data-bind' => "text: first_name.errors"}
      %br
      %input.required{:'data-bind' => "value: first_name.temp"}
    .group
      %label{:for=>:last_name}Last Name:
      %span.error{:'data-bind' => "text: last_name.errors"}
      %br
      %input.required{:'data-bind' => "value: last_name.temp"}
    .group
      %label{:for=>:id_number}ID Number:
      %span.error{:'data-bind' => "text: id_number.errors"}
      %br
      %input.required{:'data-bind' => "value: id_number.temp"}
    .group
      %label{:for=>:id_number}Status:
      %span{:'data-bind' => "text: status, style: { color: status.temp == 'ACTIVE' ? 'green' : 'red' }"}
    %button.form_button{:type => 'submit'}
      Save
    &nbsp;&nbsp;|&nbsp;&nbsp;
    =link_to("Cancel", "", :class => :button_to, :'data-bind' => "click : cancel")

%script{:type => "text/x-jquery-tmpl", :id => "bidderRow"}
  %td.clickable{:onClick => "document.location=\'bidders/checkout/${id}\'"}
    %span{:'data-bind' => "text: number"}
  %td.clickable{:onClick => "document.location=\'bidders/checkout/${id}\'"}
    %span{:'data-bind' => "text: first_name"}
  %td.clickable{:onClick => "document.location=\'bidders/checkout/${id}\'"}
    %span{:'data-bind' => "text: last_name"}
  %td.clickable{:onClick => "document.location=\'bidders/checkout/${id}\'"}
    %span{:'data-bind' => "text: status, style: { color: status() == 'ACTIVE' ? 'green' : 'red' }"}
  %td.last
    %span{:'data-bind' => "click: edit, clickBubble: false"}
      =image_tag 'page_white_edit.png'


-content_for(:context_panel) do
  #filter.block
    %h3 Options
    .content
      %form.form
        .group
          %label Show Inactive?
          %input{:type => 'checkbox', :'data-bind' => 'checked: showInactive'}

.block
  .content
    #title
      %h2 #{@auction.title} :: Bidders
    #title-menu
      %button#new{:'data-bind' => "click : newBidder, icon: 'ui-icon-plus'"}=pat(:new)
      %button#reload{:'data-bind' => "click : load, icon: 'ui-icon-refresh'"}=pat(:reload)
      %button#import{:'data-bind' => "click : load, image: 'ui-icon-transfer-e-w', imageSecondary: 'ui-icon-triangle-1-s'"}
        Import / Export
      %ul
        %li
          %a{:href=>"#"}
            Import From CSV
        %li
          %a{:href=>"#"}
            Import From Excel
        %li
          %br
        %li
          %a{:href=>"#"}
            Export To CSV
        %li
          %a{:href=>"#"}
            Export To Excel
    .inner
      %table.table{:'data-bind' =>  "dataTable: { dataSource: displayedBidders, rowTemplate: 'bidderRow', columns: ['number', 'first_name', 'last_name', 'status'], options:{'sPaginationType':'full_numbers'} }"}
        %thead
          %th.first=mat(:bidder, :number)
          %th=mat(:bidder, :first_name)
          %th=mat(:bidder, :last_name)
          %th=mat(:bidder, :status)
          %th.last="&nbsp;"