:javascript
  $(function(){
    ko.applyBindings(viewModel);
  });

  function Profile(viewModel){
    this.id = ko.property();
    this.name = ko.property();
    this.buyer_premium_type = ko.property("PERCENT");
    this.buyer_premium_amount = ko.property();
    this.commission_type = ko.property("NONE");
    this.commission_amount = ko.property();
    this.tax_exempt = ko.property(false);

    this.buyer_premium_symbol = ko.dependentObservable(function(){
        return (this.buyer_premium_type.temp() == "FIXED" ? "$" : "%");
    }, this);

    this.buyer_premium_formatted = ko.dependentObservable(function(){
      if(this.buyer_premium_type() && this.buyer_premium_amount()){
        return (this.buyer_premium_type() == "FIXED" ? "$" + this.buyer_premium_amount().toFixed(2) : this.buyer_premium_amount() + "%");
      }
      return "N/A"; 

    }, this);

    this.commission_symbol = ko.dependentObservable(function(){
        if(this.commission_type.temp() == "FIXED"){
            return "$";
        }
        if(this.commission_type.temp() == "PERCENT"){
            return "%";
        }
        return "";
    }, this);

    this.commission_formatted = ko.dependentObservable(function(){
      var isCommissionSpecified = this.commission_type() && 
            this.commission_type() != "NONE" && 
            this.commission_amount();
      if(isCommissionSpecified){
        return (this.commission_type() == "FIXED" ? "$" + this.commission_amount().toFixed(2) : this.commission_amount() + "%");
      }
      return "N/A";
    }, this);

    // functions
    this.edit = function(){
      viewModel.activeProfile(this);
      $(".buttonset").buttonset();
      $("#editDialog").dialog({title:"Edit Profile"});
    }

    this.cancel = function(){
      viewModel.activeProfile.reset();
      $("#editDialog").dialog("close");
    }

    this.save = function(){
      var wrapper = this;
      var id = wrapper().id;
      if(!id()){
        // create the record
        wrapper.save("profiles/new.json", function(result){
            viewModel.profiles.push(wrapper());
            $("#editDialog").dialog("close");
            $.growlUI("Profile Created"); 
        });
      } else {
        // save existing record
        wrapper.save("profiles/" + id() + ".json", function(result){
              $("#editDialog").dialog("close");
              $.growlUI("Profile Saved"); 
        });
      }
    }
  }

  viewModel = function(){
    this.profiles = ko.observableArray([]);
    this.activeProfile = ko.model();

    this.newProfile = function() {
      new Profile(this).edit();
    };

    // Load the initial state from server
    
    this.load = function() {
      var self = this;
      $.get("profiles.json", function(data) {
        var all = ko.mapToModelList(Profile, data, self);
        self.profiles(all);
      });
    }
    
    load();
  }.call();

#editDialog{ :style=>"display:none;"}
  %div{:'data-bind' => "template: {name:'editForm', data: activeProfile}"}

%script{:type => "text/x-jquery-tmpl", :id => "editForm"}
  .flash
    .message.error{:'data-bind' => "visible: activeProfile.hasErrors()"}
      Errors occurred while saving the profile.
  %form.form{:id => 'profileForm', :'data-bind' => 'submit:save'}
    .group
      %label{:for=>:name}Name:
      %span.error{:'data-bind' => "text: name.errors"}
      %br
      %input.required{:'data-bind' => "value: name.temp"}
    .group
      %label Buyer Premium:
      %span.error{:'data-bind' => "text: buyer_premium_type.errors"}
      %br
        .buttonset
          %input{:id => "buyer_prem_fixed", :name => "buyer_premium_type", :type => "radio", :value => "FIXED", :'data-bind' => "checked: buyer_premium_type.temp"}
          %label{:for => "buyer_prem_fixed"} Fixed
          %input{:id => "buyer_prem_pct", :name => "buyer_premium_type", :type => "radio", :value => "PERCENT", :'data-bind' => "checked: buyer_premium_type.temp"}
          %label{:for => "buyer_prem_pct"} Percent
        %br
        %span{:'data-bind' => "text:buyer_premium_symbol"}  
        %input{:style => "width:75px", :maxlength => 3, :'data-bind' => "value: buyer_premium_amount"}
        %span.error{:'data-bind' => "text: buyer_premium_amount.errors"}
    .group
      %label Commission:
      %span.error{:'data-bind' => "text: commission_type.errors"}
      %br
        .buttonset
          %input{:id => "commission_none", :name => "commission_type", :type => "radio", :value => "NONE", :'data-bind' => "checked: commission_type.temp"}
          %label{:for => "commission_none"} None
          %input{:id => "commission_fixed", :name => "commission_type", :type => "radio", :value => "FIXED", :'data-bind' => "checked: commission_type.temp"}
          %label{:for => "commission_fixed"} Fixed
          %input{:id => "commission_pct", :name => "commission_type", :type => "radio", :value => "PERCENT", :'data-bind' => "checked: commission_type.temp"}
          %label{:for => "commission_pct"} Percent
        %br
        %span{:'data-bind' => "text:commission_symbol"}  
        %input{:style => "width:75px", :maxlength => 3, :'data-bind' => "value: commission_amount, visible: commission_type.temp() != 'NONE'"}  
        %span.error{:'data-bind' => "text: commission_amount.errors"}
    .group
      %label Tax Exempt:
      %span.error{:'data-bind' => "text: tax_exempt.errors"}
      %br
      %input{:type => 'checkbox', :'data-bind' => "checked: tax_exempt.temp"}
    %button.form_button{:type => 'submit'}
      Save
    &nbsp;&nbsp;|&nbsp;&nbsp;
    =link_to("Cancel", "", :class => :button_to, :'data-bind' => "click : cancel")

%script{:type => "text/x-jquery-tmpl", :id => "row"}
  %td
    %span{:'data-bind' => "text: name"}
  %td
    %span{:'data-bind' => "text: buyer_premium_formatted"} 
  %td
    %span{:'data-bind' => "text: commission_formatted"} 
  %td
    %input{:type => 'checkbox', :'data-bind' => "checked: tax_exempt", :disabled => true}
  %td.last
    %span.clickable{:'data-bind' => "click: edit, clickBubble: false"}
      =image_tag 'page_white_edit.png'

.block
  .content
    #title
      %h2 Auction Profiles
    #title-menu
      %button#new{:href => "", :'data-bind' => "click : newProfile, icon: 'ui-icon-plus'"}
        New
    .inner
      %table.table{:'data-bind' =>  "dataTable: { dataSource: profiles, rowTemplate: 'row', columns: ['name', 'buyer_premium_formatted', 'tax_exempt', null], 
                                         options:{sPaginationType:'full_numbers', } }"}
        %thead
          %th.first=mat(:profile, :name)
          %th Buyer Premium
          %th Commission
          %th=mat(:profile, :tax_exempt)
          %th.last="&nbsp;"